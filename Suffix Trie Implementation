class TrieNode {
  late Map<String, TrieNode> children;
  late bool isEndOfWord;

  TrieNode() {
    children = {};
    isEndOfWord = false;
  }
}

class Trie {
  late TrieNode root;

  Trie() {
    root = TrieNode();
  }

  void insert(String word) {
    TrieNode current = root;

    for (int i = 0; i < word.length; i++) {
      String char = word[i];
      if (!current.children.containsKey(char)) {
        current.children[char] = TrieNode();
      }
      current = current.children[char]!;
    }
    current.isEndOfWord = true;
  }

  bool search(String word) {
    TrieNode current = root;

    for (int i = 0; i < word.length; i++) {
      String char = word[i];
      if (!current.children.containsKey(char)) {
        return false;
      }
      current = current.children[char]!;
    }

    return current.isEndOfWord;
  }

  bool startsWith(String prefix) {
    TrieNode current = root;

    for (int i = 0; i < prefix.length; i++) {
      String char = prefix[i];
      if (!current.children.containsKey(char)) {
        return false;
      }
      current = current.children[char]!;
    }

    return true;
  }
}

void main() {
  Trie trie = Trie();

  trie.insert("hello");
  trie.insert("world");
  trie.insert("hey");

  print(trie.search("hello"));
  print(trie.search("world")); 
  print(trie.search("hey")); 
  print(trie.search("hi")); 

  print(trie.startsWith("he")); 
  print(trie.startsWith("wor")); 
  print(trie.startsWith("hey"));
  print(trie.startsWith("hii")); 
}
