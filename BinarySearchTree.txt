class Node {
  int data;
  Node? left, right;

  Node(this.data);
}

class BinarySearchTree {
  Node? root;

  void insert(int data) {
    Node? currentNode = root;
    Node? newNode = Node(data);

    if (currentNode == null) {
      // if the tree is empty
      root = newNode;
      print("$data inserted");
      return;
    }

    while (true) {
      // if the tree is not empty
      // if the data less than current note then we want to add to left else right
      if (data < currentNode!.data) {
        // add to left
        if (currentNode.left == null) {
          currentNode.left = newNode;
          break;
        } else {
          currentNode = currentNode.left;
        }
      } else {
        // data > currentNode.data ;
        // add to right
        if (currentNode.right == null) {
          currentNode.right = newNode;
          break;
        } else {
          currentNode = currentNode.right;
        }
      }
    }

    print("$data inserted");
  }

  bool contains(int data) {
    Node? currentNode = root;
    while (currentNode != null) {
      if (data < currentNode.data) {
        currentNode = currentNode.left;
      } else if (data > currentNode.data) {
        currentNode = currentNode.right;
      } else {
        // data == currentNode.data
        return true;
      }
    }

    return false;
  }

  void remove(int data) {
    removeHelper(data, root, null);
  }

  void removeHelper(int data, Node? currentNode, Node? parentNode) {
    while (currentNode != null) {
      if (data < currentNode.data) {
        parentNode = currentNode;
        currentNode = currentNode.left;
      } else if (data > currentNode.data) {
        parentNode = currentNode;
        currentNode = currentNode.left;
      } else {
        // data == currentNode.data; -> data found
        if (currentNode.left != null && currentNode.right != null) {
          // if it have two child
          currentNode.data = getMinValue(
              currentNode.right); // currentNode = min val in right section
          removeHelper(currentNode.data, currentNode.right, currentNode);
        } else {
          if (parentNode == null) {
            // if it is a root Node
            if (currentNode.right == null) {
              root = currentNode.left;
            } else {
              root = currentNode.right;
            }
          } else {
            // if it have a parent Node
            if (parentNode.left == currentNode) {
              if (currentNode.right == null) {
                parentNode.left = currentNode.left;
              } else {
                parentNode.left = currentNode.right;
              }
            } else {
              if (currentNode.right == null) {
                parentNode.right = currentNode.left;
              } else {
                parentNode.right = currentNode.right;
              }
            }
          }
        }
        break;
      }
    }
  }

  int getMinValue(Node? currentNode) {
    if (currentNode!.left == null) {
      return currentNode.data;
    } else {
      return getMinValue(currentNode.left);
    }
  }

  void inOrder() {
    inOrderHelper(root);
  }

  void inOrderHelper(Node? node) {
    if (node != null) {
      inOrderHelper(node.left);
      print(node.data);
      inOrderHelper(node.right);
    }
  }

  void preOrder() {
    preOrderHelper(root);
  }

  void preOrderHelper(Node? node) {
    if (node != null) {
      print(node.data);
      preOrderHelper(node.left);
      preOrderHelper(node.right);
    }
  }

  void postOrder() {
    postOrderHelper(root);
  }

  void postOrderHelper(Node? node) {
    if (node != null) {
      preOrderHelper(node.left);
      preOrderHelper(node.right);
      print(node.data);
    }
  }
  

}

void main() {
  BinarySearchTree tree = BinarySearchTree();
  tree.insert(10);
  tree.insert(8);
  tree.insert(11);

//   tree.postOrder();

//   tree.remove(8);

//   print(tree.contains(8));
  
  print(tree.findClosest(5));
}
